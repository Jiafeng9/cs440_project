import mujoco
import numpy as np
import time
import os
from scipy.optimize import minimize

class SimpleWritingTrajectory:
    """A simplified version of WritingTrajectory that defines trajectories directly"""
    
    def __init__(self, letter="B", model=None, data=None, chalk_tip_id=None):
        """Initialize with hardcoded trajectories to avoid dependencies"""
        if not letter or not isinstance(letter, str) or len(letter.strip()) == 0:
            letter = "B"
        
        self.letter = letter.strip().upper()
        self.m = model
        self.d = data
        self.chalk_tip_id = chalk_tip_id if chalk_tip_id is not None else -1
        self.letter_scale = 0.5
        
        # Define trajectories directly
        self.trajectory = self._get_predefined_trajectory(self.letter)
    
    def _get_predefined_trajectory(self, letter):
        """Get a predefined trajectory for a letter"""
        # Simplified trajectory points for common letters
        trajectories = {
            'A': np.array([
                [0.0, 0.0, 0.0],   # Bottom left
                [0.4, 0.0, 0.8],   # Top middle
                [0.8, 0.0, 0.0],   # Bottom right
                [0.2, 0.0, 0.4],   # Left middle (for crossbar)
                [0.6, 0.0, 0.4]    # Right middle (for crossbar)
            ]),
            'B': np.array([
                [0.0, 0.0, 0.0],   # Bottom left
                [0.0, 0.0, 0.8],   # Top left
                [0.5, 0.0, 0.8],   # Top right
                [0.6, 0.0, 0.6],   # Upper curve
                [0.5, 0.0, 0.4],   # Middle right
                [0.0, 0.0, 0.4],   # Middle left
                [0.5, 0.0, 0.4],   # Middle right (again)
                [0.6, 0.0, 0.2],   # Lower curve
                [0.5, 0.0, 0.0],   # Bottom right
                [0.0, 0.0, 0.0]    # Bottom left (again)
            ]),
            'C': np.array([
                [0.6, 0.0, 0.1],    # Bottom right
                [0.4, 0.0, 0.0],   # Bottom middle
                [0.2, 0.0, 0.1],   # Bottom left
                [0.1, 0.0, 0.4],   # Middle left
                [0.2, 0.0, 0.7],   # Top left
                [0.4, 0.0, 0.8],   # Top middle
                [0.6, 0.0, 0.7]   # Top right
            ]),
            'D': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.3, 0.0, 0.8],   # 右上角
                [0.6, 0.0, 0.6],   # 右上弧
                [0.7, 0.0, 0.4],   # 右中间
                [0.6, 0.0, 0.2],   # 右下弧
                [0.3, 0.0, 0.0],   # 右下角
                [0.0, 0.0, 0.0]    # 左下角结束点
            ]),
            'E': np.array([
                [0.6, 0.0, 0.0],   # 右下角起点
                [0.0, 0.0, 0.0],   # 左下角
                [0.0, 0.0, 0.8],   # 左上角
                [0.6, 0.0, 0.8],   # 右上角
                [0.0, 0.0, 0.8],   # 左上角(返回)
                [0.0, 0.0, 0.4],   # 左中间
                [0.5, 0.0, 0.4],   # 右中间(中横线)
                [0.0, 0.0, 0.4],   # 左中间(返回)
                [0.0, 0.0, 0.0],   # 左下角
                [0.6, 0.0, 0.0]    # 右下角结束点
            ]),
            'F': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.6, 0.0, 0.8],   # 右上角
                [0.0, 0.0, 0.8],   # 左上角(返回)
                [0.0, 0.0, 0.4],   # 左中间
                [0.5, 0.0, 0.4],   # 右中间(中横线)
                [0.0, 0.0, 0.4],   # 左中间(返回)
                [0.0, 0.0, 0.0]    # 左下角结束点
            ]),
            'G': np.array([
                [0.6, 0.0, 0.7],   # 右上角起点
                [0.4, 0.0, 0.8],   # 顶部中间
                [0.2, 0.0, 0.7],   # 左上角
                [0.1, 0.0, 0.4],   # 左侧中间
                [0.2, 0.0, 0.1],   # 左下角
                [0.4, 0.0, 0.0],   # 底部中间
                [0.6, 0.0, 0.1],   # 右下角
                [0.6, 0.0, 0.4],   # 右侧中间
                [0.4, 0.0, 0.4]    # 中间横线结束点
            ]),

            'H': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.0, 0.0, 0.4],   # 左中间
                [0.6, 0.0, 0.4],   # 右中间
                [0.6, 0.0, 0.8],   # 右上角
                [0.6, 0.0, 0.0],   # 右下角
            ]),
            'I': np.array([
                [0.1, 0.0, 0.0],   # 左下角起点
                [0.5, 0.0, 0.0],   # 右下角
                [0.3, 0.0, 0.0],   # 下中间
                [0.3, 0.0, 0.8],   # 上中间
                [0.1, 0.0, 0.8],   # 左上角
                [0.5, 0.0, 0.8]    # 右上角结束点
            ]),

            'J': np.array([
                [0.1, 0.0, 0.2],    # 底部弧结束（向上弯）
                [0.2, 0.0, 0.0],   # 底部弧中间
                [0.4, 0.0, 0.0],   # 底部弧开始
                [0.5, 0.0, 0.2],   # 右侧向下
                [0.5, 0.0, 0.8],   # 右上角
                [0.3, 0.0, 0.8]   # 上中间起点 
            ]),

            'K': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.0, 0.0, 0.4],   # 左中间
                [0.6, 0.0, 0.8],   # 右上角
                [0.0, 0.0, 0.4],   # 左中间（返回）
                [0.6, 0.0, 0.0],   # 右下角
            ]),
            'L': np.array([
                [0.6, 0.0, 0.0],   # 右下角起点
                [0.0, 0.0, 0.0],   # 左下角
                [0.0, 0.0, 0.8]    # 左上角结束点
            ]),
            'M': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.3, 0.0, 0.3],   # 中间谷点
                [0.6, 0.0, 0.8],   # 右上角
                [0.6, 0.0, 0.0]    # 右下角结束点
            ]),
            'N': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.6, 0.0, 0.0],   # 右下角
                [0.6, 0.0, 0.8]    # 右上角结束点
            ]),
            'O': np.array([
                [0.3, 0.0, 0.0],   # 底部中间起点
                [0.5, 0.0, 0.1],   # 右下部
                [0.6, 0.0, 0.4],   # 右中部
                [0.5, 0.0, 0.7],   # 右上部
                [0.3, 0.0, 0.8],   # 顶部中间
                [0.1, 0.0, 0.7],   # 左上部
                [0.0, 0.0, 0.4],   # 左中部
                [0.1, 0.0, 0.1],   # 左下部
                [0.3, 0.0, 0.0]    # 回到底部中间结束点
            ]),
            'P': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.4, 0.0, 0.8],   # 右上角
                [0.6, 0.0, 0.7],   # 上部弧线
                [0.6, 0.0, 0.5],   # 右中部
                [0.4, 0.0, 0.4],   # 下部弧线
                [0.0, 0.0, 0.4]    # 左中部结束点
            ]),
            'Q': np.array([
                [0.3, 0.0, 0.0],   # 底部中间起点
                [0.5, 0.0, 0.1],   # 右下部
                [0.6, 0.0, 0.4],   # 右中部
                [0.5, 0.0, 0.7],   # 右上部
                [0.3, 0.0, 0.8],   # 顶部中间
                [0.1, 0.0, 0.7],   # 左上部
                [0.0, 0.0, 0.4],   # 左中部
                [0.1, 0.0, 0.1],   # 左下部
                [0.3, 0.0, 0.0],   # 回到底部中间
                [0.6, 0.0, 0.0]    # Q的特有尾巴结束点
             ]),
            'R': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.4, 0.0, 0.8],   # 右上角
                [0.6, 0.0, 0.7],   # 上部弧线
                [0.6, 0.0, 0.5],   # 右中部
                [0.4, 0.0, 0.4],   # 下部弧线
                [0.0, 0.0, 0.4],   # 左中部
                [0.6, 0.0, 0.0]    # 右下角结束点
            ]),
            'S': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.3, 0.0, 0.0],   # 底部中间
                [0.6, 0.0, 0.1],   # 右下角弯曲
                [0.5, 0.0, 0.3],   # 右中下部
                [0.3, 0.0, 0.4],   # 中间点
                [0.1, 0.0, 0.5],   # 左中上部
                [0.0, 0.0, 0.7],   # 左上部弯曲
                [0.3, 0.0, 0.8],   # 顶部中间
                [0.6, 0.0, 0.8]    # 右上角结束点
            ]),
            'T': np.array([
                [0.3, 0.0, 0.0],   # 底部中间起点
                [0.3, 0.0, 0.8],   # 顶部中间
                [0.0, 0.0, 0.8],   # 左上角
                [0.6, 0.0, 0.8]    # 右上角结束点
            ]),
            'U': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.0, 0.0, 0.8],   # 左上角
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.3, 0.0, 0.0],   # 底部中间
                [0.6, 0.0, 0.0],   # 右下角
                [0.6, 0.0, 0.8],   # 右上角
            ]),
            'V': np.array([
                [0.3, 0.0, 0.0],   # 底部中间
                [0.0, 0.0, 0.8],   # 左上角起点
                [0.3, 0.0, 0.0],   # 底部中间
                [0.6, 0.0, 0.8]    # 右上角结束点
            ]),
            'W': np.array([
                [0.15, 0.0, 0.0],  # 左侧底部
                [0.0, 0.0, 0.8],   # 左上角起点
                [0.15, 0.0, 0.0],  # 左侧底部
                [0.3, 0.0, 0.4],   # 第一个中间峰
                [0.45, 0.0, 0.0],  # 第二个底部
                [0.6, 0.0, 0.8]    # 右上角结束点
            ]),
            'X': np.array([
                [0.0, 0.0, 0.0],   # 左下角
                [0.6, 0.0, 0.8],    # 右上角结束点
                [0.3, 0.0, 0.4],   # 中心点
                [0.0, 0.0, 0.8],   # 左上角起点
                [0.6, 0.0, 0.0]    # 右下角
            ]),
            'Y': np.array([
                [0.3, 0.0, 0.0],   # 底部中间
                [0.3, 0.0, 0.4],   # 回到中心点
                [0.0, 0.0, 0.8],   # 左上角起点
                [0.3, 0.0, 0.4],   # 中心点
                [0.6, 0.0, 0.8]    # 右上角结束点
            ]),
            'Z': np.array([
                [0.0, 0.0, 0.0],   # 左下角起点
                [0.6, 0.0, 0.8],    # 右上角结束点
                [0.0, 0.0, 0.8],   # 左上角
                [0.6, 0.0, 0.8],   # 右上角
                [0.0, 0.0, 0.0],     # 左下角起点
                [0.6, 0.0, 0.0],   # 右下角
            ])
        }

        
        return trajectories[letter]
    
    def get_ee_trajectory(self, start_pos):
        """Get the end-effector trajectory in absolute coordinates"""
        # Make a copy to avoid modifying the original
        trajectory = self.trajectory.copy()
        
        # Scale and offset the trajectory
        scaled_trajectory = trajectory * self.letter_scale
        absolute_trajectory = scaled_trajectory + np.array(start_pos)
        return absolute_trajectory